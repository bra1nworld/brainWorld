// Generated by CoffeeScript 1.10.0
(function() {
  
/**
 * Implementation of base URI resolving algorithm in rfc2396.
 * - Algorithm from section 5.2
 *   (ignoring difference between undefined and '')
 * - Regular expression from appendix B
 * - Tests from appendix C
 *
 * @param {string} uri the relative URI to resolve
 * @param {string} baseuri the base URI (must be absolute) to resolve against
 */

var URI = function(){
    function resolveUri(sUri, sBaseUri) {
    if (sUri == '' || sUri.charAt(0) == '#') return sUri;
    var hUri = getUriComponents(sUri);
    if (hUri.scheme) return sUri;
    var hBaseUri = getUriComponents(sBaseUri);
    hUri.scheme = hBaseUri.scheme;
    if (!hUri.authority) {
        hUri.authority = hBaseUri.authority;
        if (hUri.path.charAt(0) != '/') {
        aUriSegments = hUri.path.split('/');
        aBaseUriSegments = hBaseUri.path.split('/');
        aBaseUriSegments.pop();
        var iBaseUriStart = aBaseUriSegments[0] == '' ? 1 : 0;
        for (var i =0;i < aUriSegments.length;i++) {
            if (aUriSegments[i] == '..')
            if (aBaseUriSegments.length > iBaseUriStart) aBaseUriSegments.pop();
            else { aBaseUriSegments.push(aUriSegments[i]); iBaseUriStart++; }
            else if (aUriSegments[i] != '.') aBaseUriSegments.push(aUriSegments[i]);
        }
        if (aUriSegments[i] == '..' || aUriSegments[i] == '.') aBaseUriSegments.push('');
        hUri.path = aBaseUriSegments.join('/');
        }
    }
    var result = '';
    if (hUri.scheme   ) result += hUri.scheme + ':';
    if (hUri.authority) result += '//' + hUri.authority;
    if (hUri.path     ) result += hUri.path;
    if (hUri.query    ) result += '?' + hUri.query;
    if (hUri.fragment ) result += '#' + hUri.fragment;
    return result;
    }
    uriregexp = new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?');
    function getUriComponents(uri) {
    var c = uri.match(uriregexp);
    return { scheme: c[2], authority: c[4], path: c[5], query: c[7], fragment: c[9] };
    }
    var URI = {}
    URI.resolve = function(base,target){
        return resolveUri(target,base);
    }
    URI.normalize = function(url){
        return URI.resolve("",url);
    }
    return {URI:URI}
}();
  var BundleBuilder, Context, ReplaceSafeString, Script, replaceSafe,
    slice = [].slice;

  replaceSafe = function(str) {
    return new ReplaceSafeString(str);
  };

  ReplaceSafeString = (function() {
    function ReplaceSafeString(str1) {
      this.str = str1;
    }

    ReplaceSafeString.prototype.replace = function(q, rep) {
      var str;
      if (typeof rep === "string") {
        str = this.str.replace(q, function() {
          return rep;
        });
      } else {
        str = this.str.replace(q, rep);
      }
      return new ReplaceSafeString(str);
    };

    ReplaceSafeString.prototype.toString = function() {
      return this.str;
    };

    return ReplaceSafeString;

  })();

  Context = (function() {
    Context.id = 0;

    Context.instances = [];

    Context.getContext = function(id) {
      return this.instances[id];
    };

    Context._httpGet = function(url, callback) {
      var XHR;
      XHR = new XMLHttpRequest();
      XHR.open("GET", url, true);
      XHR.onreadystatechange = (function(_this) {
        return function(err) {
          if (XHR.readyState === 4) {
            if (XHR.status !== 200) {
              callback(new Error("Network Error status code " + XHR.status));
              return;
            }
            callback(null, XHR.responseText);
          }
          if (XHR.readyState === 0) {
            return callback(new Error("Network Error"));
          }
        };
      })(this);
      return XHR.send();
    };

    Context.prototype.createDedicateWorker = function(pathes, option) {
      var bundle, i, j, len, len1, path, script, scripts;
      if (option == null) {
        option = {};
      }
      bundle = new BundleBuilder({
        contextName: option.contextName || this.globalName + "Worker"
      });
      for (i = 0, len = pathes.length; i < len; i++) {
        path = pathes[i];
        if (typeof path === "string") {
          scripts = [this.getRequiredScript(path)];
        } else if (path.test) {
          scripts = this.getMatchingScripts(path);
        } else {
          continue;
        }
        for (j = 0, len1 = scripts.length; j < len1; j++) {
          script = scripts[j];
          bundle.addScript(script);
        }
      }
      if (option.entryData) {
        bundle.addEntryData(option.entryData, option.entryDataName || "EntryData");
      }
      if (option.entryModule) {
        bundle.addEntryModule(option.entryModule);
      } else if (option.entryFunction) {
        bundle.addEntryFunction(option.entryFunction);
      }
      if (option.fake) {
        return bundle.generateFakeWorker(option);
      } else {
        return bundle.generateWorker(option);
      }
    };

    function Context(option) {
      if (option == null) {
        option = {};
      }
      this.id = Context.id++;
      Context.instances[this.id] = this;
      this.globalName = "LeafRequire";
      this.localStoragePrefix = option.localStoragePrefix || this.globalName;
      this.dry = option.dry || false;
      this.ready = false;
      this.scripts = [];
      this.store = {
        files: {}
      };
      this.init({
        root: option.root,
        version: option.version,
        name: option.name,
        debug: option.debug
      });
    }

    Context.prototype.init = function(option) {
      this.root = option.root || this.root || "./";
      if (this.root.charAt(this.root.length - 1) !== "/") {
        this.root += "/";
      }
      this.version = option.version || this.version || "0.0.0";
      this.name = option.name || this.name || "leaf-require";
      this.debug = option.debug || this.name || false;
      return this.enableSourceMap = option.enableSourceMap || this.debug || false;
    };

    Context.prototype.use = function() {
      var file, files, i, len, results1;
      files = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        results1.push(this.scripts.push(new Script(this, file)));
      }
      return results1;
    };

    Context.prototype._debug = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.debug) {
        return console.debug.apply(console, args);
      }
    };

    Context.prototype.getMatchingScripts = function(path) {
      var i, len, ref, result, script;
      result = [];
      ref = this.scripts;
      for (i = 0, len = ref.length; i < len; i++) {
        script = ref[i];
        if (path.test(script.scriptPath)) {
          result.push(script);
        }
      }
      return result;
    };

    Context.prototype.getScript = function(path) {
      var i, j, len, len1, ref, ref1, script;
      ref = this.scripts;
      for (i = 0, len = ref.length; i < len; i++) {
        script = ref[i];
        if (script.scriptPath === path) {
          return script;
        }
      }
      if (path.lastIndexOf(".js") !== path.length - ".js".length) {
        ref1 = this.scripts;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          script = ref1[j];
          if (script.scriptPath === path + ".js") {
            return script;
          }
        }
      }
      return null;
    };

    Context.prototype.getRequire = function(path) {
      var script;
      script = this.getScript(path);
      return function(_path) {
        return script.require(_path);
      };
    };

    Context.prototype.setRequire = function(path, module, exports, __require) {
      var script;
      script = this.getScript(path);
      return script.setRequire(module, exports, __require);
    };

    Context.prototype.loadConfig = function(config, callback) {
      var e, error;
      if (callback == null) {
        callback = function() {};
      }
      if (typeof config === "string") {
        return this.setConfigRemote(config, callback);
      } else {
        try {
          this.setConfigSync(config);
          return callback();
        } catch (error) {
          e = error;
          return callback(e);
        }
      }
    };

    Context.prototype.toConfig = function() {
      return {
        name: this.name,
        version: this.version,
        debug: this.debug,
        js: {
          root: this.root,
          files: this.scripts.map(function(script) {
            return {
              hash: script.hash,
              path: script.path
            };
          })
        }
      };
    };

    Context.prototype.setConfigRemote = function(src, callback) {
      return Context._httpGet(src, (function(_this) {
        return function(err, content) {
          var config, e, error;
          if (err) {
            console.error(err);
            callback(new Error("fail to get configs " + src + " due to network error"));
            return;
          }
          try {
            config = JSON.parse(content);
            _this.setConfigSync(config);
            return callback(null);
          } catch (error) {
            e = error;
            return callback(e);
          }
        };
      })(this));
    };

    Context.prototype.setConfigSync = function(config) {
      var file, files, i, js, len;
      this.hasConfiged = true;
      js = config.js || {};
      files = js.files || [];
      this.init({
        name: config.name,
        root: js.root,
        version: config.version,
        debug: config.debug
      });
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        this.use(file);
      }
      return this.store.config = config;
    };

    Context.prototype.getRequiredScript = function(path, fromScript) {
      var realPath, script, url;
      url = URI.URI;
      if (fromScript) {
        realPath = url.resolve(fromScript.scriptPath, path);
      } else {
        realPath = url.normalize(path);
      }
      if (realPath.indexOf("/") === 0) {
        realPath = realPath.substring(1);
      }
      script = this.getScript(realPath);
      if (!script) {
        throw new Error("module " + realPath + " not found");
      }
      return script;
    };

    Context.prototype.require = function(path, fromScript) {
      var script;
      script = this.getRequiredScript(path, fromScript);
      return script.beRequired();
    };

    Context.prototype.restoreCache = function() {
      var base, e, error;
      try {
        this.store = JSON.parse(window.localStorage.getItem(this.localStoragePrefix + "/cache") || "{}");
      } catch (error) {
        e = error;
        this.store = {};
      }
      if (this.store.config) {
        this.loadConfig(this.store.config);
      }
      if ((base = this.store).files == null) {
        base.files = {};
      }
    };

    Context.prototype.isCacheAtomic = function() {
      var files, i, len, ref, script;
      if (!this.store) {
        return false;
      }
      files = this.store.files || {};
      ref = this.scripts;
      for (i = 0, len = ref.length; i < len; i++) {
        script = ref[i];
        if (script.hash && script.loadPath && files[script.loadPath] && files[script.loadPath].hash === script.hash) {
          continue;
        } else {
          return false;
        }
      }
      return true;
    };

    Context.prototype.clearCache = function(version) {
      return window.localStorage.removeItem(this.localStoragePrefix + "/cache");
    };

    Context.prototype.compactCache = function(option) {
      var i, j, len, len1, ref, ref1, script;
      if (option == null) {
        option = {};
      }
      if (this.isCacheAtomic()) {
        return false;
      }
      if (!this.isReady) {
        return false;
      }
      if (this.hasConfiged || option.exportConfig) {
        this.store.config = this.toConfig();
      }
      this.store.files = {};
      ref = this.scripts;
      for (i = 0, len = ref.length; i < len; i++) {
        script = ref[i];
        if (!script.scriptContent) {
          return false;
        }
      }
      ref1 = this.script;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        script = ref1[j];
        script._saveScriptContentToStore(script.scriptContent);
      }
      return true;
    };

    Context.prototype.load = function(option, callback) {
      var loadFailure;
      if (option == null) {
        option = {};
      }
      if (typeof option === "function") {
        callback = option;
      }
      loadFailure = false;
      return this.scripts.forEach((function(_this) {
        return function(script) {
          return script.load(function(err) {
            var allReady;
            if (loadFailure) {
              return;
            }
            if (err) {
              loadFailure = true;
              callback(new Error("fail to load script " + script.loadPath));
              return;
            }
            allReady = _this.scripts.every(function(item) {
              if (!item.isReady && !(item.dryReady && _this.dry)) {
                return false;
              }
              return true;
            });
            if (allReady) {
              _this.isReady = true;
              return callback();
            }
          });
        };
      })(this));
    };

    Context.prototype.saveCache = function(option) {
      var store;
      if (option == null) {
        option = {};
      }
      store = this.store || {};
      if (this.hasConfiged || option.exportConfig) {
        store.config = this.toConfig();
      }
      this._debug("save cache", store, this.localStoragePrefix + "/cache");
      return window.localStorage.setItem(this.localStoragePrefix + "/cache", JSON.stringify(store || {}));
    };

    Context.prototype.saveCacheDelay = function() {
      if (this._saveCacheDelayTimer) {
        clearTimeout(this._saveCacheDelayTimer);
      }
      return this._saveCacheDelayTimer = setTimeout(((function(_this) {
        return function() {
          return _this.saveCache();
        };
      })(this)), 0);
    };

    Context.prototype.clone = function(option) {
      var c;
      c = new Context(option);
      c.loadConfig(this.toConfig());
      c.scripts = this.scripts.map(function(script) {
        return script.clone(c);
      });
      return c;
    };

    return Context;

  })();

  Script = (function() {
    function Script(context1, file) {
      var url;
      this.context = context1;
      url = URI.URI;
      if (typeof file === "string") {
        this.path = file;
      } else {
        this.path = file.path;
        this.hash = file.hash || null;
      }
      this.scriptPath = url.normalize(this.path);
      this.loadPath = url.resolve(this.context.root, file.loadPath || this.path);
      this._debug = this.context._debug.bind(this);
      if (file.scriptContent) {
        this.scriptContent = file.scriptContent;
      }
    }

    Script.prototype.clone = function(context) {
      var i, len, prop, ref, s;
      s = new Script(context, {
        path: this.path,
        hash: this.hash,
        loadPath: this.loadPath
      });
      ref = ["isReady", "_module", "_exports", "_require", "_isRequiring", "exports", "scriptContent"];
      for (i = 0, len = ref.length; i < len; i++) {
        prop = ref[i];
        s[prop] = this[prop];
      }
      return s;
    };

    Script.prototype._restoreScriptContentFromStore = function() {
      if (this.context.store && this.context.store.files) {
        return this.context.store.files[this.loadPath];
      }
      return null;
    };

    Script.prototype._saveScriptContentToStore = function(content) {
      this._debug("save to " + this.loadPath + " with hash " + this.hash + " ??");
      return this.context.store.files[this.loadPath] = {
        hash: this.hash,
        content: content
      };
    };

    Script.prototype.require = function(path) {
      return this.context.require(path, this);
    };

    Script.prototype.setRequire = function(module, exports, __require) {
      this._module = module;
      this._exports = exports;
      this._require = __require;
      this.isReady = true;
      if (this._loadCallback) {
        return this._loadCallback();
      }
    };

    Script.prototype.beRequired = function() {
      if (this.exports) {
        return this.exports;
      }
      if (this._isRequiring) {
        return this._module.exports;
      }
      this._isRequiring = true;
      this._require();
      this._isRequiring = false;
      if (this._exports !== this._module.exports) {
        this._exports = this._module.exports;
      }
      this.exports = this._exports;
      return this.exports;
    };

    Script.prototype.load = function(callback) {
      var file, loadPath;
      this._loadCallback = callback;
      if (this.isReady) {
        callback();
        return;
      }
      if (this.scriptContent) {
        this.importToDocument();
        return;
      }
      file = this._restoreScriptContentFromStore();
      this._debug("try restore " + this.loadPath + " from cache", file);
      this._debug(this.hash, file && file.hash);
      if (file && file.content && !(this.version && this.version !== file.version)) {
        this._debug("cache found and do the restore");
        this._debug(this.loadPath + " from cache");
        this.scriptContent = file.content;
        setTimeout(((function(_this) {
          return function() {
            return _this.importToDocument();
          };
        })(this)), 0);
        return;
      }
      loadPath = this.loadPath + (this.context.withVersion && ("?version=" + this.context.version) || "");
      return Context._httpGet(loadPath, (function(_this) {
        return function(err, content) {
          if (err) {
            callback(new Error("fail to get " + _this.loadPath));
            return;
          }
          _this.scriptContent = content;
          return _this.importToDocument();
        };
      })(this));
    };

    Script.prototype.importToDocument = function() {
      var code, mapDataUrl, script, scriptContent;
      if (this.script) {
        null;
      }
      scriptContent = this.scriptContent;
      this._saveScriptContentToStore(scriptContent);
      if (this.context.dry && this._loadCallback) {
        this.dryReady = true;
        this._loadCallback();
        return;
      }
      script = document.createElement("script");
      code = "(function(){\n    var require = " + this.context.globalName + ".getContext(" + this.context.id + ").getRequire('" + this.scriptPath + "')\n    require.context = " + this.context.globalName + ".getContext(" + this.context.id + ")\n    require.LeafRequire = " + this.context.globalName + "\n    var module = {exports:{}};\n    var exports = module.exports\n    var global = window;\n    var __require = function(){\n\n// " + this.scriptPath + "\n// BY leaf-require\n" + scriptContent + "\n\n}\n" + this.context.globalName + ".getContext(" + this.context.id + ").setRequire('" + this.scriptPath + "',module,exports,__require)\n\n})()";
      if (this.context.debug || this.context.enableSourceMap) {
        mapDataUrl = this.createSourceMapUrl(scriptContent);
        code += "\n//# sourceMappingURL=" + mapDataUrl;
      }
      this.script = script;
      script.text = code;
      return document.body.appendChild(script);
    };

    Script.prototype.createSourceMapUrl = function(content, offset) {
      var _, i, index, j, len, line, map, ref, ref1, result, url;
      if (offset == null) {
        offset = 11;
      }
      map = {
        "version": 3,
        "file": this.loadPath,
        "sourceRoot": "",
        "sources": [this.loadPath],
        "sourcesContent": [content],
        "names": [],
        "mappings": null
      };
      result = [];
      for (_ = i = 0, ref = offset; 0 <= ref ? i < ref : i > ref; _ = 0 <= ref ? ++i : --i) {
        result.push(";");
      }
      ref1 = content.split("\n");
      for (index = j = 0, len = ref1.length; j < len; index = ++j) {
        line = ref1[index];
        if (index === 0) {
          result.push("AAAA");
        } else {
          result.push(";AACA");
        }
      }
      map.mappings = result.join("");
      url = "data:application/json;base64," + (btoa(unescape(encodeURIComponent(JSON.stringify(map)))));
      return url;
    };

    return Script;

  })();

  Context.BestPractice = (function() {
    function BestPractice(option) {
      this.config = option.config || "./require.json";
      this.localStoragePrefix = option.localStoragePrefix;
      this.errorHint = option.errorHint || this.errorHint;
      this.updateConfirm = option.updateConfirm || this.updateConfirm;
      this.debug = option.debug || false;
      this.showDebugInfo = option.showDebugInfo || option.debug || false;
      this.enableSourceMap = option.enableSourceMap || false;
      this.entry = option.entry || "main";
      this.withVersion = option.withVersion;
      this.version = option.version;
      this.option = option;
    }

    BestPractice.prototype._debug = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.debug || this.showDebugInfo) {
        if (console.debug == null) {
          console.debug = console.log.bind(console);
        }
        return console.debug.apply(console, args);
      }
    };

    BestPractice.prototype.run = function(callback) {
      this.context = new LeafRequire({
        localStoragePrefix: this.localStoragePrefix,
        enableSourceMap: this.enableSourceMap
      });
      this.context.withVersion = this.withVersion;
      this.context.version = this.version;
      if (this.debug) {
        this.context.loadConfig(this.config, (function(_this) {
          return function() {
            return _this.context.load(function() {
              if (callback) {
                return callback();
              } else {
                return _this.requireEntry();
              }
            });
          };
        })(this));
        return;
      }
      this.context.restoreCache();
      if (this.context.hasConfiged) {
        if (this.context.isCacheAtomic()) {
          this._debug("may use cache completely");
        }
        return this.context.load((function(_this) {
          return function(err) {
            _this._debug("has config");
            if (err) {
              _this.errorHint();
              return;
            }
            setTimeout(_this.checkVerionUpdate.bind(_this), 0);
            _this.requireEntry();
          };
        })(this));
      } else {
        return this.context.loadConfig(this.config, (function(_this) {
          return function(err) {
            if (err) {
              _this.errorHint();
              return;
            }
            return _this.context.load(function(err) {
              if (err) {
                _this.errorHint();
                return;
              }
              _this.context.saveCache();
              return _this.requireEntry();
            });
          };
        })(this));
      }
    };

    BestPractice.prototype.requireEntry = function() {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
      if ((ref = this.context) != null ? (ref1 = ref.store) != null ? (ref2 = ref1.config) != null ? (ref3 = ref2.js) != null ? ref3.main : void 0 : void 0 : void 0 : void 0) {
        return this.context.require((ref4 = this.context) != null ? (ref5 = ref4.store) != null ? (ref6 = ref5.config) != null ? (ref7 = ref6.js) != null ? ref7.main : void 0 : void 0 : void 0 : void 0);
      } else {
        return this.context.require(this.entry);
      }
    };

    BestPractice.prototype.errorHint = function() {
      return alert("Fail to load application, please reload the webpage. If not work, please contact admin.");
    };

    BestPractice.prototype.updateConfirm = function(callback) {
      var message;
      message = "detect a new version of the app, should we reload";
      return callback(confirm(message));
    };

    BestPractice.prototype.semanticCompare = function(a, b) {
      var as, bs, i, index, len, va, vb;
      if (a == null) {
        a = "";
      }
      if (b == null) {
        b = "";
      }
      as = a.split(".");
      bs = b.split(".");
      while (as.length > bs.length) {
        bs.push("0");
      }
      while (bs.length > as.length) {
        as.push("0");
      }
      as = as.map(function(item) {
        return Number(item) || 0;
      });
      bs = bs.map(function(item) {
        return Number(item) || 0;
      });
      for (index = i = 0, len = as.length; i < len; index = ++i) {
        va = as[index];
        vb = bs[index];
        if (va > vb) {
          return 1;
        } else if (va < vb) {
          return -1;
        }
      }
      return 0;
    };

    BestPractice.prototype.checkVerionUpdate = function() {
      var checker;
      checker = new Context({
        localStoragePrefix: this.localStoragePrefix,
        dry: true
      });
      this._debug("check config");
      return checker.loadConfig(this.config, (function(_this) {
        return function(err) {
          if (err) {
            console.error(err, "fail to do load config");
            return;
          }
          checker.name = "checker";
          _this._debug("check config loaded");
          if ((_this.semanticCompare(checker.version, _this.context.version)) !== 0) {
            _this._debug(_this.context.version, "<", checker.version);
            _this._debug("check config detect updates, load it");
            return checker.load(function(err) {
              if (err) {
                console.error(err, "fail to load updates");
                return;
              }
              _this._debug("updates load complete");
              checker.compactCache();
              checker.saveCache();
              return _this.updateConfirm(function(result) {
                var base;
                if (result) {
                  if (!(typeof (base = window.location).reload === "function" ? base.reload() : void 0)) {
                    return window.location = window.location.toString();
                  }
                }
              });
            });
          } else {
            return _this._debug("check config complete, no updates: version " + checker.version);
          }
        };
      })(this));
    };

    return BestPractice;

  })();

  BundleBuilder = (function() {
    BundleBuilder.fromStandAloneConfig = function(config) {
      var builder, scripts, url;
      url = URI.URI;
      scripts = config.js.files.map(function(file) {
        return {
          path: url.normalize(file.path),
          scriptContent: file.scriptContent
        };
      });
      builder = new BundleBuilder({
        contextName: config.contextName
      });
      builder.addScript.apply(builder, scripts);
      if (config.js.main) {
        builder.addEntryModule(config.js.main);
      }
      return builder;
    };

    function BundleBuilder(option) {
      if (option == null) {
        option = {};
      }
      this.prefixCodes = [];
      this.scripts = [];
      this.suffixCodes = [];
      this.contextName = option.contextName || "GlobalContext";
    }

    BundleBuilder.prototype.addScript = function() {
      var item, ref, scripts, url;
      scripts = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = arguments.length; i < len; i++) {
          item = arguments[i];
          results1.push(item);
        }
        return results1;
      }).apply(this, arguments);
      url = URI.URI;
      return (ref = this.scripts).push.apply(ref, scripts.map((function(_this) {
        return function(file) {
          var path;
          path = url.normalize(file.path);
          if (path.charAt(0) === "/") {
            path = path.slice(1);
          }
          return {
            path: path,
            content: file.scriptContent
          };
        };
      })(this)));
    };

    BundleBuilder.prototype.createFakeWorker = function() {
      var guestend, hostend;
      hostend = {
        postMessage: function(message) {
          return typeof guestend.onmessage === "function" ? guestend.onmessage({
            data: message
          }) : void 0;
        },
        addEventListener: function(event, handler) {
          if (event === "message") {
            return this.onmessage = handler;
          }
        }
      };
      guestend = {
        isFakeWorker: true,
        postMessage: function(message) {
          return typeof hostend.onmessage === "function" ? hostend.onmessage({
            data: message
          }) : void 0;
        },
        addEventListener: function(event, handler) {
          if (event === "message") {
            return this.onmessage = handler;
          }
        }
      };
      return {
        hostend: hostend,
        guestend: guestend
      };
    };

    BundleBuilder.prototype.addPrefixFunction = function(fn) {
      return this.prefixCodes.push("(" + (fn.toString()) + ")();");
    };

    BundleBuilder.prototype.addEntryData = function(data, name) {
      return this.suffixCodes.push(name + " = " + (JSON.stringify(data)) + ";\n");
    };

    BundleBuilder.prototype.addEntryFunction = function(fn) {
      return this.suffixCodes.push("(" + (fn.toString()) + ")();");
    };

    BundleBuilder.prototype.addEntryModule = function(name) {
      return this.suffixCodes.push("(function(){" + this.contextName + ".require(\"" + name + "\")})();");
    };

    BundleBuilder.prototype.generateWorker = function(option) {
      var js, smUrl, url, worker;
      if (option == null) {
        option = {};
      }
      js = this.generateBundle();
      if (option.sourceMap) {
        smUrl = this.sourceMapUrlFromJs(js);
        js += ";\n//# sourceMappingURL=" + smUrl;
      }
      url = URL.createObjectURL(new Blob([js]));
      worker = new Worker(url);
      return worker;
    };

    BundleBuilder.prototype.sourceMapUrlFromJs = function(js) {
      var i, index, len, line, map, ref, result, smUrl;
      map = {
        "version": 3,
        "file": this.contextName,
        "sourceRoot": "",
        "sources": [this.contextName],
        "sourcesContent": [js],
        "names": [],
        "mappings": null
      };
      result = [];
      ref = js.split("\n");
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        line = ref[index];
        if (index === 0) {
          result.push("AAAA");
        } else {
          result.push(";AACA");
        }
      }
      map.mappings = result.join("");
      smUrl = "data:application/json;base64," + (btoa(unescape(encodeURIComponent(JSON.stringify(map)))));
      return smUrl;
    };

    BundleBuilder.prototype.generateFakeWorker = function(option) {
      var code, fakeWorker, js, name, random, script, smUrl;
      if (option == null) {
        option = {};
      }
      js = this.generateBundle();
      fakeWorker = this.createFakeWorker();
      random = Math.random().toString().slice(5, 9);
      code = "(function(){\n    var self = _" + random + this.contextName + "FakeWorkerEnd;\n    " + js + ";\n})();";
      if (option.sourceMap) {
        smUrl = this.sourceMapUrlFromJs(js);
        code += "\n//# sourceMappingURL=" + smUrl;
      }
      name = "_" + random + this.contextName + "FakeWorkerEnd";
      self[name] = fakeWorker.guestend;
      script = document.createElement("script");
      script.text = code;
      script.setAttribute("worker", name);
      setTimeout(function() {
        return document.body.appendChild(script);
      }, 0);
      return fakeWorker.hostend;
    };

    BundleBuilder.prototype.replaceSafe = function(str) {
      ReplaceSafeString = (function() {
        function ReplaceSafeString(str1) {
          this.str = str1;
        }

        ReplaceSafeString.prototype.replace = function(q, rep) {
          if (typeof rep === "string") {
            str = this.str.replace(q, function() {
              return rep;
            });
          } else {
            str = this.str.replace(q, rep);
          }
          return new ReplaceSafeString(str);
        };

        ReplaceSafeString.prototype.toString = function() {
          return this.str;
        };

        return ReplaceSafeString;

      })();
      return new ReplaceSafeString(str);
    };

    BundleBuilder.prototype.generateBundle = function() {
      var core, prefix, scripts, suffix;
      prefix = this.prefixCodes.join(";\n");
      suffix = this.suffixCodes.join(";\n");
      scripts = this.scripts.map((function(_this) {
        return function(script) {
          return _this.replaceSafe(_this.moduleTemplate).replace(/{{contextName}}/g, _this.contextName).replace(/{{currentModulePath}}/g, script.path).replace("{{currentModuleContent}}", script.content).toString();
        };
      })(this));
      core = this.replaceSafe(this.coreTemplate).replace(/{{contextName}}/g, this.contextName).replace("{{modules}}", scripts.join(";\n")).replace("{{createContextProcedure}}", this.getPureFunctionProcedure("createBundleContext")).replace("{{entryData}}").replace("{{BundleBuilderCode}}", this.getPureClassCode(BundleBuilder)).toString();
      return [prefix, core, suffix].join(";\n");
    };

    BundleBuilder.prototype.getPureFunctionProcedure = function(name) {
      return "(" + (this["$$" + name].toString()) + ")()";
    };

    BundleBuilder.prototype.getPureClassCode = function(ClassObject, className) {
      var codes, constructor, prop, ref, template, value;
      if (!className) {
        className = ClassObject.name;
      }
      constructor = ClassObject.toString();
      template = className + ".prototype[\"{{prop}}\"] = {{value}};";
      codes = [];
      ref = ClassObject.prototype;
      for (prop in ref) {
        value = ref[prop];
        if (typeof value === "function") {
          value = value.toString();
        } else {
          value = JSON.stringify(value);
        }
        codes.push(this.replaceSafe(template).replace("{{prop}}", prop).replace("{{value}}", value).toString());
      }
      return className + " = " + (constructor.toString()) + "\n" + (codes.join("\n"));
    };

    BundleBuilder.prototype.$$createBundleContext = function() {
      return {
        modules: {},
        wrapCode: function(string) {
          return "(function(){\n" + string + "\n})();";
        },
        createDedicateWorker: function(pathes, option) {
          var bundle, i, item, j, len, len1, path, script, scripts;
          bundle = new BundleBuilder({
            contextName: option.contextName || (this.globalName || "GlobalContext") + "Worker"
          });
          for (i = 0, len = pathes.length; i < len; i++) {
            path = pathes[i];
            if (typeof path === "string") {
              script = this.getRequiredModule(path);
              scripts = [
                {
                  module: script,
                  path: path
                }
              ];
            } else if (path.test) {
              scripts = this.getMatchingModules(path);
            } else {
              continue;
            }
            for (j = 0, len1 = scripts.length; j < len1; j++) {
              item = scripts[j];
              script = {
                path: item.path,
                scriptContent: "(" + (item.module.exec.toString()) + ")()"
              };
              bundle.addScript(script);
            }
          }
          if (option.entryData) {
            bundle.addEntryData(option.entryData, option.entryDataName || "EntryData");
          }
          if (option.entryModule) {
            bundle.addEntryModule(option.entryModule);
          } else if (option.entryFunction) {
            bundle.addEntryFunction(option.entryFunction);
          }
          if (option.fake) {
            return bundle.generateFakeWorker(option);
          } else {
            return bundle.generateWorker(option);
          }
        },
        require: function(path) {
          return this.requireModule(null, path);
        },
        getRequiredModuleContent: function(path, fromPath) {
          var module;
          if (fromPath == null) {
            fromPath = "";
          }
          module = this.getRequiredModule(path, fromPath);
          return "(" + (module.exec.toString()) + ")()";
        },
        getMatchingModules: function(path) {
          var item, modulePath, ref, results;
          results = [];
          ref = this.modules;
          for (modulePath in ref) {
            item = ref[modulePath];
            if (path.test(modulePath)) {
              results.push({
                path: modulePath,
                module: item
              });
            }
          }
          return results;
        },
        getRequiredModule: function(path, fromPath) {
          var module, realPath, url;
          if (fromPath == null) {
            fromPath = "";
          }
          url = URI.URI;
          if (fromPath) {
            realPath = url.resolve(fromPath, path);
          } else {
            realPath = url.normalize(path);
          }
          if (realPath.charAt(0) === "/") {
            realPath = realPath.slice(1);
          }
          if (realPath.slice(-3) !== ".js") {
            realPath += ".js";
          }
          if (!this.modules[realPath]) {
            throw new Error("module " + path + " required at " + (fromPath || "/") + " is not exists");
          }
          module = this.modules[realPath];
          return module;
        },
        requireModule: function(fromPath, path) {
          var module;
          module = this.getRequiredModule(path, fromPath);
          if (module.exports) {
            return module.exports;
          }
          if (module.isRequiring) {
            return module.module.exports;
          }
          module.isRequiring = true;
          module.exec();
          module.exports = module.module.exports;
          module.isRequiring = false;
          return module.exports;
        },
        setModule: function(modulePath, module, exec) {
          if (modulePath.slice(-3) !== ".js") {
            modulePath += ".js";
          }
          return this.modules[modulePath] = {
            module: module,
            exec: exec
          };
        }
      };
    };

    BundleBuilder.prototype.moduleTemplate = "(function(){\nvar require = {{contextName}}.requireModule.bind({{contextName}},\"{{currentModulePath}}\");\nvar module = {};\nmodule.exports = {};\nvar exports = module.exports;\nfunction exec(){\n    {{currentModuleContent}}\n}\n{{contextName}}.setModule(\"{{currentModulePath}}\",module,exec);\n})()";

    BundleBuilder.prototype.coreTemplate = "(function(){\n/**\n * Implementation of base URI resolving algorithm in rfc2396.\n * - Algorithm from section 5.2\n *   (ignoring difference between undefined and '')\n * - Regular expression from appendix B\n * - Tests from appendix C\n *\n * @param {string} uri the relative URI to resolve\n * @param {string} baseuri the base URI (must be absolute) to resolve against\n */\n\nvar URI = function(){\n    function resolveUri(sUri, sBaseUri) {\n    if (sUri == '' || sUri.charAt(0) == '#') return sUri;\n    var hUri = getUriComponents(sUri);\n    if (hUri.scheme) return sUri;\n    var hBaseUri = getUriComponents(sBaseUri);\n    hUri.scheme = hBaseUri.scheme;\n    if (!hUri.authority) {\n        hUri.authority = hBaseUri.authority;\n        if (hUri.path.charAt(0) != '/') {\n        aUriSegments = hUri.path.split('/');\n        aBaseUriSegments = hBaseUri.path.split('/');\n        aBaseUriSegments.pop();\n        var iBaseUriStart = aBaseUriSegments[0] == '' ? 1 : 0;\n        for (var i = 0;i < aUriSegments.length; i++) {\n            if (aUriSegments[i] == '..')\n            if (aBaseUriSegments.length > iBaseUriStart) aBaseUriSegments.pop();\n            else { aBaseUriSegments.push(aUriSegments[i]); iBaseUriStart++; }\n            else if (aUriSegments[i] != '.') aBaseUriSegments.push(aUriSegments[i]);\n        }\n        if (aUriSegments[i] == '..' || aUriSegments[i] == '.') aBaseUriSegments.push('');\n        hUri.path = aBaseUriSegments.join('/');\n        }\n    }\n    var result = '';\n    if (hUri.scheme   ) result += hUri.scheme + ':';\n    if (hUri.authority) result += '//' + hUri.authority;\n    if (hUri.path     ) result += hUri.path;\n    if (hUri.query    ) result += '?' + hUri.query;\n    if (hUri.fragment ) result += '#' + hUri.fragment;\n    return result;\n    }\n    uriregexp = new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?');\n    function getUriComponents(uri) {\n    var c = uri.match(uriregexp);\n    return { scheme: c[2], authority: c[4], path: c[5], query: c[7], fragment: c[9] };\n    }\n    var URI = {}\n    URI.resolve = function(base,target){\n        return resolveUri(target,base);\n    }\n    URI.normalize = function(url){\n        return URI.resolve(\"\",url);\n    }\n    return {URI:URI}\n}();\n{{BundleBuilderCode}}\n{{contextName}} = {{createContextProcedure}};\n{{contextName}}.contextName = \"{{contextName}}\";\n{{modules}};\n})()";

    return BundleBuilder;

  })();

  Context.BundleBuilder = BundleBuilder;

  if (typeof window !== "undefined") {
    window.module = {
      exports: window
    };
  }

  module.exports.LeafRequire = Context;

}).call(this);
